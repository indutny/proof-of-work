#!/usr/bin/env node
'use strict';

const path = require('path');
const Buffer = require('buffer').Buffer;

const pow = require('../');

const usage = () => {
  const _ = path.basename(process.argv[1]);
  console.error(
      `Usage: ${_} [prefix] <complexity>                - generate nonce\n` +
      `       ${_} verify [prefix] <complexity> [nonce] - verify nonce`);
  process.exit(1);
};

function parseInput(argv, off) {
  const cur = argv[off] || '';
  const next = argv[off + 1] || '';
  if (/^[a-f\d]+$/i.test(cur) && /^\d+$/.test(next)) {
    return {
      prefix: Buffer.from(cur, 'hex'),
      complexity: next | 0,
      extra: argv.slice(off + 2)
    };
  } else if (/^\d+$/.test(cur)) {
    return {
      prefix: null,
      complexity: cur | 0,
      extra: argv.slice(off + 1)
    };
  }

  return false;
}

if (process.argv[2] === 'verify') {
  const input = parseInput(process.argv, 3);
  if (!input)
    return usage();

  const verifier = new pow.Verifier({
    size: 1024,
    n: 1,
    complexity: input.complexity,
    prefix: input.prefix
  });

  const check = (hex) => {
    const nonce = Buffer.hasOwnProperty('from') ?
        Buffer.from(hex, 'hex') : new Buffer(hex, 'hex');

    process.exit(verifier.check(nonce) ? 0 : 1);
  };

  if (input.extra[0]) {
    if (!/^[0-9a-f]+$/i.test(input.extra[0]))
      return usage();

    return check(input.extra[0]);
  }

  let nonce = '';
  process.stdin.on('data', (chunk) => {
    nonce += chunk;
  });
  process.stdin.once('end', () => {
    check(nonce);
  });

  return;
}

const input = parseInput(process.argv, 2);
if (!input)
  return usage();

const solver = new pow.Solver();

process.stdout.write(
    solver.solve(input.complexity, input.prefix).toString('hex'));
